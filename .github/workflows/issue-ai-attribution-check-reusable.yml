# ABOUTME: Reusable workflow to detect and block AI/agent attribution in GitHub issues
# This workflow scans issue titles and bodies for AI tool attribution patterns (Claude, GPT, etc.)
# and agent validation mentions, posting feedback and optionally failing the workflow.

name: Issue AI Attribution Check (Reusable)

on:
  workflow_call:
    inputs:
      fail_on_attribution:
        description: 'Whether to fail the workflow when AI attribution is detected'
        required: false
        type: boolean
        default: true

jobs:
  check-attribution:
    name: Detect AI Attribution in Issues
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Check for AI attribution markers
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const body = issue.body || '';
            const title = issue.title || '';
            const combined = title + '\n' + body;

            // Normalize text to catch bypasses (leetspeak, spacing)
            function normalize(text) {
              text = text.toLowerCase();
              // Replace leetspeak numbers with letters
              const replacements = {'1': 'l', '3': 'e', '4': 'a', '0': 'o', '5': 's', '7': 't'};
              for (const [num, letter] of Object.entries(replacements)) {
                text = text.replaceAll(num, letter);
              }
              // Remove spaces, hyphens, underscores
              return text.replace(/[\s_-]/g, '');
            }

            const normalized = normalize(combined);
            let foundAttribution = false;
            let matchedPattern = '';

            // Check AI tool names with normalization (catches leetspeak/spacing)
            const aiTools = ['claude', 'gpt', 'chatgpt', 'copilot', 'gemini', 'bard'];
            const attributionVerbs = ['coauthoredby', 'generatedwith', 'generatedby',
                                      'createdby', 'writtenby', 'builtby', 'helpedby'];

            for (const tool of aiTools) {
              if (normalized.includes(tool)) {
                // Check for attribution context
                if (attributionVerbs.some(verb => normalized.includes(verb))) {
                  foundAttribution = true;
                  matchedPattern = `AI tool name: ${tool} (with normalization - catches leetspeak/spacing)`;
                  break;
                }
              }
            }

            // Check explicit patterns in original text
            if (!foundAttribution) {
              const explicitPatterns = [
                /claude\.com\/claude-code/i,
                /(Reviewed by|Validated by|Approved by|Checked by).*(agent|architecture-designer|security-validator|performance-optimizer|test-automation-qa|code-quality-analyzer)/i,
                /agent (review|validation|approval|check)/i,
                /ü§ñ.*(Claude|AI|GPT)/i,
              ];

              for (const pattern of explicitPatterns) {
                if (pattern.test(combined)) {
                  foundAttribution = true;
                  matchedPattern = pattern.toString();
                  break;
                }
              }
            }

            // Check generic AI attribution patterns
            if (!foundAttribution) {
              const genericPatterns = [
                /\b(with|by|using|via|from|thanks to)\s+(AI|artificial intelligence|chatbot|chat bot|language model|LLM)\b/i,
                /\bAI\s+(assistance|help|support|tool)\b/i,
                /\b(AI\s+)?assistant\s+(help|assistance)/i,
              ];

              for (const pattern of genericPatterns) {
                if (pattern.test(combined)) {
                  foundAttribution = true;
                  matchedPattern = pattern.toString() + ' (generic AI attribution)';
                  break;
                }
              }
            }

            if (foundAttribution) {
              const comment = `‚ùå **AI/Agent Attribution Detected**

            This issue contains AI tool or agent attribution, which is against project policy.

            **Found pattern**: ${matchedPattern}

            **Enhanced Detection**: This check now catches bypass attempts including:
            - üîç Leetspeak: C1aude, GPT-4, Ch4tGP7, Cl4ud3
            - üîç Spacing: C l a u d e, G P T - 4
            - üîç Generic terms: AI assistance, chatbot help, LLM support

            **Policy**: Per CLAUDE.md Section 1, AI/agent attribution should NOT be in:
            - ‚ùå Issue descriptions
            - ‚ùå Commit messages
            - ‚ùå Pull request descriptions

            **Where agent validations SHOULD be documented:**
            - ‚úÖ Session handoff files (SESSION_HANDOVER.md)
            - ‚úÖ Implementation documentation (docs/implementation/)
            - ‚úÖ PRD/PDR documents
            - ‚úÖ PR comments (workflow progress updates)

            **Why this policy?**
            - Issues/PRs should describe problems/solutions, not authorship
            - AI tools and agents are development aids, not contributors
            - Focus on content, not creation method
            - Agent validations belong in internal documentation

            **Action Required**: Please edit this issue to remove AI/agent attribution references.

            **Note**: Human co-authors are welcome and encouraged!`;

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: comment
              });

              // Add label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['needs-revision']
              });

              const failOnAttribution = ${{ inputs.fail_on_attribution }};
              if (failOnAttribution) {
                core.setFailed('AI attribution detected in issue');
              } else {
                console.log('‚ö†Ô∏è AI attribution detected but not failing workflow (fail_on_attribution=false)');
              }
            } else {
              console.log('‚úÖ No AI attribution found in issue');
            }
